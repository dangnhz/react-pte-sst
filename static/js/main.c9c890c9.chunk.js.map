{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","questions","setQuestions","activeIndex","setActiveIndex","activeQuestion","note","setNote","checkedKeywords","setCheckedKeywords","showKeywords","setShowKeywords","wordCount","setWordCount","charsCount","setCharsCount","userId","setUserId","undefined","countDown","setCountDown","isInteractWithDOM","setIsInteractWithDOM","results","setResults","isSubmitting","setIsSubmitting","audioRef","useRef","useEffect","axios","get","process","then","res","data","catch","err","console","log","index","localStorage","getItem","parseInt","setItem","setTimeout","bodyEl","document","querySelector","buttons","querySelectorAll","addEventListener","forEach","button","myTimeout","myInterval","clearTimeout","current","clearInterval","setInterval","prev","audio","play","error","className","length","id","disabled","onClick","prevIndex","map","item","ref","autoPlay","autoPlayAfterSrcChange","volume","src","style","color","fontWeight","placeholder","value","onChange","e","text","target","spaces","match","count","marginRight","htmlFor","type","questionKeywords","keywords","split","inputKeywords","word","replace","toLowerCase","matchingKeywords","includes","push","join","payload","FormData","append","post","result","Number","parseFloat","context","toFixed","grammar","spelling","form","marks","dangerouslySetInnerHTML","__html","description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gRAgVeA,EA1UH,WACV,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACMC,EAAiBJ,EAAUE,GACjC,EAAwBH,mBAAS,IAAjC,mBAAOM,EAAP,KAAaC,EAAb,KACA,EAA8CP,mBAAS,IAAvD,mBAAOQ,EAAP,KAAwBC,EAAxB,KACA,EAAwCT,oBAAS,GAAjD,mBAAOU,EAAP,KAAqBC,EAArB,KACA,EAAkCX,mBAAS,GAA3C,mBAAOY,EAAP,KAAkBC,EAAlB,KACA,EAAoCb,mBAAS,GAA7C,mBAAOc,EAAP,KAAmBC,EAAnB,KACA,EAA4Bf,mBAAS,MAArC,mBAAOgB,EAAP,KAAeC,EAAf,KACA,EAAkCjB,wBAASkB,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkDpB,oBAAS,GAA3D,mBAAOqB,EAAP,KAA0BC,EAA1B,KACA,EAA8BtB,mBAAS,MAAvC,mBAAOuB,EAAP,KAAgBC,EAAhB,KACA,EAAwCxB,oBAAS,GAAjD,mBAAOyB,EAAP,KAAqBC,GAArB,KAEMC,GAAWC,iBAAO,MAExBC,qBAAU,WACRC,IACGC,IAAIC,qCACJC,MAAK,SAACC,GAAD,OAAShC,EAAagC,EAAIC,SAC/BC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAC7B,IAEHR,qBAAU,WACR,IAAIW,EAAQC,aAAaC,QAAQ,yBAE7BF,GACFpC,EAAeuC,SAASH,MAEzB,IA8CHX,qBAAU,WACRL,EAAW,MACXjB,EAAQ,IACRE,EAAmB,IACnBE,GAAgB,GAChB8B,aAAaG,QAAQ,wBAAyBzC,KAC7C,CAACA,IAEJ0B,qBAAU,WACRgB,YAAW,WACT,IAAMC,EAASC,SAASC,cAAc,QAChCC,EAAUF,SAASG,iBAAiB,UAE1CJ,EAAOK,iBAAiB,SAAS,kBAAM7B,GAAqB,MAE5D2B,EAAQG,SAAQ,SAACC,GACfA,EAAOF,iBAAiB,SAAS,kBAAM7B,GAAqB,WAE7D,OAEF,IAEH,IAAIgC,GAAY1B,mBAEZ2B,GAAa3B,mBAEjBC,qBAAU,WACR,GAAIR,EAAmB,CACrBmC,aAAaF,GAAUG,SACvBC,cAAcH,GAAWE,SAEzBrC,EAAa,GAEbmC,GAAWE,QAAUE,aAAY,WAC/BvC,GAAa,SAACwC,GAAD,OAAUA,EAAO,OAC7B,KAEH,IACEN,GAAUG,QAAUZ,YAAW,WAC7BlB,GAAS8B,QAAQI,MAAMJ,QAAQK,OAC/BJ,cAAcH,GAAWE,WACxB,KACH,MAAOM,GACPzB,QAAQC,IAAIwB,OAIf,CAAC5D,IAWJ,OACE,qBAAK6D,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,UAAf,UACE,oBAAIA,UAAU,YAAd,wCACU,OAAT/D,QAAS,IAATA,OAAA,EAAAA,EAAWgE,QAAS,GACnB,sBAAKC,GAAG,aAAaF,UAAU,aAA/B,UACE,sBAAKA,UAAU,iBAAf,UACE,wBACEA,UAAU,WACVG,SAA0B,IAAhBhE,EACViE,QAAS,kBACPjE,EAAc,GACdC,GAAe,SAACiE,GAAD,OAAeA,EAAY,MAL9C,sBAUA,sBAAML,UAAU,yBAAhB,SACG7D,EAAc,IAEjB,wBACE6D,UAAU,WACVG,SAAUhE,IAAgBF,EAAUgE,OAAS,EAC7CG,QAAS,kBACPjE,EAAcF,EAAUgE,QACxB7D,GAAe,SAACiE,GAAD,OAAeA,EAAY,MAL9C,qBAWF,qBAAKL,UAAU,oBAAf,SACG/D,EAAUqE,KAAI,SAACC,EAAM/B,GAAP,OACb,wBACEwB,UAAW7D,IAAgBqC,EAAQ,SAAW,GAE9C4B,QAAS,kBAAMhE,EAAeoC,IAHhC,SAKGA,EAAQ,GAHJA,cAWjB,qBAAKwB,UAAU,eAAf,SACG/D,EAAUgE,OAAS,GAClB,sBAAKD,UAAU,WAAf,UACE,qBAAKA,UAAU,cAAf,0UAQA,qBAAKA,UAAU,eAAf,SACE,cAAC,IAAD,CACEQ,IAAK7C,GACL8C,UAAU,EACVC,wBAAwB,EACxBC,QAAM,EACNC,IAAKvE,EAAewD,UAGxB,sBAAKG,UAAS,qBAA8B,IAAd7C,EAAkB,SAAW,IAA3D,uCAC4B,uBAAM0D,MAAO,CAAEC,MAAO,UAAWC,WAAY,QAA7C,cAAyD5D,GAAwB,IAAjF,OAD5B,cAGA,0BACE6D,YAAY,gBACZhB,UAAU,YACViB,MAAO3E,EACP4E,SAnFS,SAACC,GACtB,IAAIC,EAAOD,EAAEE,OAAOJ,MAChBK,EAASF,EAAKG,MAAM,QACpBC,EAAQF,EAASA,EAAOrB,OAAS,EACrCpD,EAAa2E,GACbzE,EAAcqE,EAAKnB,QACnB1D,EAAQ6E,MA+EE,uBACA,uBACA,sBAAKpB,UAAU,kBAAf,UACE,gCACE,uBAAMa,MAAO,CAAEY,YAAa,QAA5B,oBACS,sBAAMZ,MAAO,CAAEC,MAAO,UAAWC,WAAY,QAA7C,SAAwDnE,OAEjE,2CACS,sBAAMiE,MAAO,CAAEC,MAAO,UAAWC,WAAY,QAA7C,SAAwDjE,UAGnE,sBAAKkD,UAAU,gBAAf,UACE,uBAAO0B,QAAQ,UAAf,uBACA,uBACExB,GAAG,UACHyB,KAAK,OACLV,MAAOjE,EACPkE,SAAU,SAACC,GAAD,OAAOlE,EAAUkE,EAAEE,OAAOJ,gBAI1C,yBACEjB,UAAU,qBACVI,QAzMQ,WACpB1C,IAAgB,GAChB,IAF0B,EAEpBkE,EAAmB3F,EAAUE,GAAa0F,SAASC,MAAM,KACzDC,EAAgBzF,EACnBwF,MAAM,KACNxB,KAAI,SAAC0B,GAAD,OAAUA,EAAKC,QAAQ,YAAa,IAAIC,iBAE3CC,EAAmB,GAPG,cASTP,GATS,IAS1B,2BAAmC,CAAC,IAA3BI,EAA0B,QAI/BA,EAHYD,EAAcK,SAASJ,GAG/B,8CAA0CA,EAA1C,WAEA,8CAA0CA,EAA1C,WAENG,EAAiBE,KAAKL,IAjBE,8BAmB1BvF,EAAmB0F,EAAiBG,KAAK,MACzC3F,GAAgB,GAEhB,IAAI4F,EAAU,IAAIC,SAClBD,EAAQE,OAAO,cAAepG,EAAe6D,IAC7CqC,EAAQE,OAAO,eAAgB,IAC/BF,EAAQE,OAAO,aAAc7F,GAC7B2F,EAAQE,OAAO,cAAenG,GAC9BiG,EAAQE,OAAO,UAAWzF,GAE1Bc,IACG4E,KACC,yEACAH,GAEDtE,MAAK,SAACC,GACLV,EAAWU,EAAIC,KAAKwE,QACpBjF,IAAgB,MAEjBU,OAAM,SAACC,GACNX,IAAgB,GAChBY,QAAQC,IAAIF,OAkKJ8B,SAAmB,KAAT7D,EAHZ,UAKGmB,EAAe,aAAe,SAC9BA,GAAgB,sBAAMuC,UAAU,eAGnC,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,QAAf,sBACYvC,GAAgB,qBAAKuC,UAAU,eACvCvC,IAAiBF,GAAW,MAC7BA,IAAYE,GACX,uBACEuC,UAAU,eACVa,MAAO,CAAEC,MAAO,UAAWC,WAAY,QAFzC,UAIG6B,OAAOC,WAAWtF,EAAQuF,SAASC,QAAQ,GAJ9C,aAQJ,sBAAK/C,UAAU,QAAf,sBACYvC,GAAgB,qBAAKuC,UAAU,eACvCvC,IAAiBF,GAAW,MAC7BA,IAAYE,GACX,uBACEuC,UAAU,eACVa,MAAO,CAAEC,MAAO,UAAWC,WAAY,QAFzC,UAIG6B,OAAOC,WAAWtF,EAAQyF,SAASD,QAAQ,GAJ9C,aAQJ,sBAAK/C,UAAU,QAAf,uBACavC,GAAgB,qBAAKuC,UAAU,eACxCvC,IAAiBF,GAAW,MAC7BA,IAAYE,GACX,uBACEuC,UAAU,eACVa,MAAO,CAAEC,MAAO,UAAWC,WAAY,QAFzC,UAIG6B,OAAOC,WAAWtF,EAAQ0F,UAAUF,QAAQ,GAJ/C,aAQJ,sBAAK/C,UAAU,QAAf,mBACSvC,GAAgB,qBAAKuC,UAAU,eACpCvC,IAAiBF,GAAW,MAC7BA,IAAYE,GACX,uBACEuC,UAAU,eACVa,MAAO,CAAEC,MAAO,UAAWC,WAAY,QAFzC,UAIG6B,OAAOC,WAAWtF,EAAQ2F,MAAMH,QAAQ,GAJ3C,aAQJ,sBAAK/C,UAAU,QAAf,oBACUvC,GAAgB,qBAAKuC,UAAU,eACrCvC,IAAiBF,GAAW,MAC7BA,IAAYE,GACX,uBACEuC,UAAU,eACVa,MAAO,CAAEC,MAAO,UAAWC,WAAY,QAFzC,UAIG6B,OAAOC,WAAWtF,EAAQ4F,OAAOJ,QAAQ,GAJ5C,iBAULrG,GACC,sBAAKsD,UAAU,eAAf,UACE,qBACEA,UAAS,+BACPtD,EAAe,kBAAoB,IAErC0G,wBAAyB,CACvBC,OAAQhH,EAAeiH,eAG3B,sBAAKtD,UAAU,oBAAf,UACE,0CACA,qBACEA,UAAU,gBACVoD,wBAAyB,CAAEC,OAAQ7G,sBCvT1C+G,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxF,MAAK,YAAkD,IAA/CyF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlF,SAASmF,eAAe,SAM1BX,M","file":"static/js/main.c9c890c9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport ReactAudioPlayer from \"react-h5-audio-player\";\nimport \"react-h5-audio-player/lib/styles.css\";\nimport \"./App.scss\";\n\nconst App = () => {\n  const [questions, setQuestions] = useState([]);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const activeQuestion = questions[activeIndex];\n  const [note, setNote] = useState(\"\");\n  const [checkedKeywords, setCheckedKeywords] = useState(\"\");\n  const [showKeywords, setShowKeywords] = useState(false);\n  const [wordCount, setWordCount] = useState(0);\n  const [charsCount, setCharsCount] = useState(0);\n  const [userId, setUserId] = useState(1299);\n  const [countDown, setCountDown] = useState(undefined);\n  const [isInteractWithDOM, setIsInteractWithDOM] = useState(false);\n  const [results, setResults] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const audioRef = useRef(null);\n\n  useEffect(() => {\n    axios\n      .get(process.env.REACT_APP_JSON)\n      .then((res) => setQuestions(res.data))\n      .catch((err) => console.log(err));\n  }, []);\n\n  useEffect(() => {\n    let index = localStorage.getItem(\"active_question_index\");\n\n    if (index) {\n      setActiveIndex(parseInt(index));\n    }\n  }, []);\n\n  const checkKeywords = () => {\n    setIsSubmitting(true);\n    const questionKeywords = questions[activeIndex].keywords.split(\" \");\n    const inputKeywords = note\n      .split(\" \")\n      .map((word) => word.replace(/[^\\w\\s]/gi, \"\").toLowerCase());\n\n    let matchingKeywords = [];\n\n    for (let word of questionKeywords) {\n      let matched = inputKeywords.includes(word);\n\n      if (matched) {\n        word = `<span class=\"matched-keyword green\">${word}</span>`;\n      } else {\n        word = `<span class=\"unmatched-keyword red\">${word}</span>`;\n      }\n      matchingKeywords.push(word);\n    }\n    setCheckedKeywords(matchingKeywords.join(\" \"));\n    setShowKeywords(true);\n\n    let payload = new FormData();\n    payload.append(\"question_id\", activeQuestion.id);\n    payload.append(\"question_cat\", 17);\n    payload.append(\"word_count\", wordCount);\n    payload.append(\"user_string\", note);\n    payload.append(\"user_id\", userId);\n\n    axios\n      .post(\n        \"https://api.masterpte.com.au/api/webservices/practice_result_listening\",\n        payload\n      )\n      .then((res) => {\n        setResults(res.data.result);\n        setIsSubmitting(false);\n      })\n      .catch((err) => {\n        setIsSubmitting(false);\n        console.log(err);\n      });\n  };\n\n  useEffect(() => {\n    setResults(null);\n    setNote(\"\");\n    setCheckedKeywords(\"\");\n    setShowKeywords(false);\n    localStorage.setItem(\"active_question_index\", activeIndex);\n  }, [activeIndex]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      const bodyEl = document.querySelector(\"body\");\n      const buttons = document.querySelectorAll(\"button\");\n\n      bodyEl.addEventListener(\"click\", () => setIsInteractWithDOM(true));\n\n      buttons.forEach((button) => {\n        button.addEventListener(\"click\", () => setIsInteractWithDOM(true));\n      });\n    }, 1000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let myTimeout = useRef();\n\n  let myInterval = useRef();\n\n  useEffect(() => {\n    if (isInteractWithDOM) {\n      clearTimeout(myTimeout.current);\n      clearInterval(myInterval.current);\n\n      setCountDown(6);\n\n      myInterval.current = setInterval(() => {\n        setCountDown((prev) => prev - 1);\n      }, 1000);\n\n      try {\n        myTimeout.current = setTimeout(() => {\n          audioRef.current.audio.current.play();\n          clearInterval(myInterval.current);\n        }, 6000);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeIndex]);\n\n  const handleOnChange = (e) => {\n    let text = e.target.value;\n    let spaces = text.match(/\\S+/g);\n    let count = spaces ? spaces.length : 0;\n    setWordCount(count);\n    setCharsCount(text.length);\n    setNote(text);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <div className=\"sidebar\">\n          <h1 className=\"app-title\">PTE Summarize Spoken Text</h1>\n          {questions?.length > 0 && (\n            <div id=\"pagination\" className=\"pagination\">\n              <div className=\"pagination-top\">\n                <button\n                  className=\"btn-prev\"\n                  disabled={activeIndex === 0}\n                  onClick={() =>\n                    activeIndex > 0 &&\n                    setActiveIndex((prevIndex) => prevIndex - 1)\n                  }\n                >\n                  Previous\n                </button>\n                <span className=\"active-question-number\">\n                  {activeIndex + 1}\n                </span>\n                <button\n                  className=\"btn-next\"\n                  disabled={activeIndex === questions.length - 1}\n                  onClick={() =>\n                    activeIndex < questions.length &&\n                    setActiveIndex((prevIndex) => prevIndex + 1)\n                  }\n                >\n                  Next\n                </button>\n              </div>\n              <div className=\"pagination-bottom\">\n                {questions.map((item, index) => (\n                  <button\n                    className={activeIndex === index ? \"active\" : \"\"}\n                    key={index}\n                    onClick={() => setActiveIndex(index)}\n                  >\n                    {index + 1}\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"main-content\">\n          {questions.length > 0 && (\n            <div className=\"question\">\n              <div className=\"description\">\n                You will hear a short lecture. Write a summary for a fellow\n                student who was not present at the lecture. You should write 50\n                - 70 words. You have 10 minutes to finish this task. Your\n                response will be judged on the quality of your writing and on\n                how well your response presents the key points presented in the\n                lecture.\n              </div>\n              <div className=\"audio-player\">\n                <ReactAudioPlayer\n                  ref={audioRef}\n                  autoPlay={false}\n                  autoPlayAfterSrcChange={false}\n                  volume\n                  src={activeQuestion.audio}\n                />\n              </div>\n              <div className={`count-down ${countDown === 0 ? \"hidden\" : \"\"}`}>\n                The audio will play after <span style={{ color: \"#F8176D\", fontWeight: \"bold\" }}> {countDown ? countDown : \"x\"} </span> seconds\n              </div>\n              <textarea\n                placeholder=\"Enter text...\"\n                className=\"text-note\"\n                value={note}\n                onChange={handleOnChange}\n              ></textarea>\n              <br />\n              <br />\n              <div className=\"word-user-input\">\n                <div>\n                  <span style={{ marginRight: \"3rem\" }}>\n                    Words: <span style={{ color: \"#F8176D\", fontWeight: \"bold\" }}>{wordCount}</span>\n                  </span>\n                  <span>\n                    Chars: <span style={{ color: \"#F8176D\", fontWeight: \"bold\" }}>{charsCount}</span>\n                  </span>\n                </div>\n                <div className=\"user-id-input\">\n                  <label htmlFor=\"user-id\">User ID: </label>\n                  <input\n                    id=\"user-id\"\n                    type=\"text\"\n                    value={userId}\n                    onChange={(e) => setUserId(e.target.value)}\n                  />\n                </div>\n              </div>\n              <button\n                className=\"btn-check-keywords\"\n                onClick={checkKeywords}\n                disabled={note === \"\"}\n              >\n                {isSubmitting ? \"Submitting\" : \"Submit\"}\n                {isSubmitting && <span className=\"spinner\"></span>}\n              </button>\n\n              <div className=\"results\">\n                <div className=\"score\">\n                  Content: {isSubmitting && <div className=\"spinner-2\"></div>}\n                  {!isSubmitting && !results && \"N/A\"}\n                  {results && !isSubmitting && (\n                    <span\n                      className=\"score-number\"\n                      style={{ color: \"#F8176D\", fontWeight: \"bold\" }}\n                    >\n                      {Number.parseFloat(results.context).toFixed(2)} / 2\n                    </span>\n                  )}\n                </div>\n                <div className=\"score\">\n                  Grammar: {isSubmitting && <div className=\"spinner-2\"></div>}\n                  {!isSubmitting && !results && \"N/A\"}\n                  {results && !isSubmitting &&(\n                    <span\n                      className=\"score-number\"\n                      style={{ color: \"#F8176D\", fontWeight: \"bold\" }}\n                    >\n                      {Number.parseFloat(results.grammar).toFixed(2)} / 2\n                    </span>\n                  )}\n                </div>\n                <div className=\"score\">\n                  Spelling: {isSubmitting && <div className=\"spinner-2\"></div>}\n                  {!isSubmitting && !results && \"N/A\"}\n                  {results && !isSubmitting && (\n                    <span\n                      className=\"score-number\"\n                      style={{ color: \"#F8176D\", fontWeight: \"bold\" }}\n                    >\n                      {Number.parseFloat(results.spelling).toFixed(2)} / 2\n                    </span>\n                  )}\n                </div>\n                <div className=\"score\">\n                  Form: {isSubmitting && <div className=\"spinner-2\"></div>}\n                  {!isSubmitting && !results && \"N/A\"}\n                  {results && !isSubmitting && (\n                    <span\n                      className=\"score-number\"\n                      style={{ color: \"#F8176D\", fontWeight: \"bold\" }}\n                    >\n                      {Number.parseFloat(results.form).toFixed(2)} / 2\n                    </span>\n                  )}\n                </div>\n                <div className=\"score\">\n                  Marks: {isSubmitting && <div className=\"spinner-2\"></div>}\n                  {!isSubmitting && !results && \"N/A\"}\n                  {results && !isSubmitting && (\n                    <span\n                      className=\"score-number\"\n                      style={{ color: \"#F8176D\", fontWeight: \"bold\" }}\n                    >\n                      {Number.parseFloat(results.marks).toFixed(2)} / 90\n                    </span>\n                  )}\n                </div>\n              </div>\n\n              {showKeywords && (\n                <div className=\"question-box\">\n                  <div\n                    className={`question-transcripts ${\n                      showKeywords ? \"keywords-showed\" : \"\"\n                    }`}\n                    dangerouslySetInnerHTML={{\n                      __html: activeQuestion.description,\n                    }}\n                  ></div>\n                  <div className=\"question-keywords\">\n                    <b>Keywords:</b>\n                    <div\n                      className=\"keywords-list\"\n                      dangerouslySetInnerHTML={{ __html: checkedKeywords }}\n                    ></div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}