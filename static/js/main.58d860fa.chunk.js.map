{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","questions","setQuestions","activeIndex","setActiveIndex","activeQuestion","note","setNote","checkedKeywords","setCheckedKeywords","showKeywords","setShowKeywords","useEffect","axios","get","process","then","res","data","catch","err","console","log","index","localStorage","getItem","parseInt","setItem","className","length","id","disabled","onClick","prevIndex","map","item","autoPlay","src","audio","placeholder","value","onChange","e","target","questionKeywords","keywords","split","inputKeywords","word","replace","matchingKeywords","includes","push","join","dangerouslySetInnerHTML","__html","description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58d860fa.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AudioPlayer from 'react-h5-audio-player';\nimport 'react-h5-audio-player/lib/styles.css';\nimport './App.scss';\n\nconst App = () => {\n\tconst [questions, setQuestions] = useState([]);\n\tconst [activeIndex, setActiveIndex] = useState(0);\n\tconst activeQuestion = questions[activeIndex];\n\tconst [note, setNote] = useState('');\n\tconst [checkedKeywords, setCheckedKeywords] = useState('');\n\tconst [showKeywords, setShowKeywords] = useState(false);\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(process.env.REACT_APP_JSON)\n\t\t\t.then((res) => setQuestions(res.data))\n\t\t\t.catch((err) => console.log(err));\n\t}, []);\n\n\tuseEffect(() => {\n\t\tlet index = localStorage.getItem('active_question_index');\n\n\t\tif (index) {\n\t\t\tsetActiveIndex(parseInt(index));\n\t\t}\n\t}, []);\n\n\tconst checkKeywords = () => {\n\t\tconst questionKeywords = questions[activeIndex].keywords.split(' ');\n\t\tconst inputKeywords = note.split(' ').map((word) => word.replace(/[^\\w\\s]/gi, ''));\n\n\t\tlet matchingKeywords = [];\n\n\t\tfor (let word of questionKeywords) {\n\t\t\tlet matched = inputKeywords.includes(word);\n\n\t\t\tif (matched) {\n\t\t\t\tword = `<span class=\"matched-keyword green\">${word}</span>`;\n\t\t\t} else {\n\t\t\t\tword = `<span class=\"unmatched-keyword red\">${word}</span>`;\n\t\t\t}\n\t\t\tmatchingKeywords.push(word);\n\t\t}\n\t\tsetCheckedKeywords(matchingKeywords.join(' '));\n\t\tsetShowKeywords(true);\n\t};\n\n\tuseEffect(() => {\n\t\tsetNote('');\n\t\tsetCheckedKeywords('');\n\t\tsetShowKeywords(false);\n\t\tlocalStorage.setItem('active_question_index', activeIndex);\n\t}, [activeIndex]);\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"sidebar\">\n\t\t\t\t\t<h1 className=\"app-title\">PTE Summarize Spoken Text</h1>\n\t\t\t\t\t{questions?.length > 0 && (\n\t\t\t\t\t\t<div id=\"pagination\" className=\"pagination\">\n\t\t\t\t\t\t\t<div className=\"pagination-top\">\n                \n                    <button className=\"btn-prev\" disabled={activeIndex === 0} onClick={() => activeIndex > 0 && setActiveIndex((prevIndex) => prevIndex - 1)}>\n                      Previous\n                    </button>\n                    <span className=\"active-question-number\">{activeIndex + 1}</span>\n                    <button\n                      className=\"btn-next\"\n                      disabled={activeIndex === questions.length - 1}\n                      onClick={() => activeIndex < questions.length && setActiveIndex((prevIndex) => prevIndex + 1)}>\n                      Next\n                    </button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"pagination-bottom\">\n\t\t\t\t\t\t\t\t{questions.map((item, index) => (\n\t\t\t\t\t\t\t\t\t<button className={activeIndex === index ? 'active' : ''} key={index} onClick={() => setActiveIndex(index)}>\n\t\t\t\t\t\t\t\t\t\t{index + 1}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"main-content\">\n\t\t\t\t\t{questions.length > 0 && (\n\t\t\t\t\t\t<div className=\"question\">\n\n              <div className=\"description\">You will hear a short lecture. Write a summary for a fellow student who was not present at the lecture. You should write 50 - 70 words. You have 10 minutes to finish this task. Your response will be judged on the quality of your writing and on how well your response presents the key points presented in the lecture.</div>\n\t\t\t\t\t\t\t<div className=\"audio-player\">\n\t\t\t\t\t\t\t\t<AudioPlayer autoPlay={false} src={activeQuestion.audio} />\n\t\t\t\t\t\t\t</div>\n\n              <textarea placeholder=\"Enter text...\" className=\"text-note\" value={note} onChange={(e) => setNote(e.target.value)}></textarea>\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<button className=\"btn-check-keywords\" onClick={checkKeywords}>\n\t\t\t\t\t\t\t\tCheck keywords\n\t\t\t\t\t\t\t</button>\n\n\t\t\t\t\t\t\t{showKeywords && (\n\t\t\t\t\t\t\t\t<div className=\"question-box\">\n\t\t\t\t\t\t\t\t\t<div className={`question-transcripts ${showKeywords ? 'keywords-showed' : ''}`} dangerouslySetInnerHTML={{ __html: activeQuestion.description }}></div>\n\t\t\t\t\t\t\t\t\t<div className=\"question-keywords\">\n\t\t\t\t\t\t\t\t\t\t<b>Keywords:</b> <div className=\"keywords-list\" dangerouslySetInnerHTML={{ __html: checkedKeywords }}></div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}